{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ts-docstr # A document string minor mode using tree-sitter Table of Contents ts-docstr \ud83d\udcbe Installation \ud83d\udd0d Method 1. with straight.el and use-package : \ud83d\udd0d Method 2. Manual \ud83d\udcc7 Commands \ud83d\udd27 Customization \ud83c\udfa8 Styles \u2328\ufe0f Keys \ud83d\udcac Ask to select the style \ud83c\udfa3 Hooks \ud83d\udd28 Supported languages Contribute \u2753 How to support my favorite language? \ud83d\udd0d The activate function \ud83d\udd0d The parse function \ud83d\udd0d The insert function \u2753 How to add a document string style? \u2753 How to trigger by a key? \ud83d\udcbe Installation # \ud83d\udd0d Method 1. with straight.el and use-package : # ( use-package ts-docstr :straight ( ts-docstr :repo \"emacs-vs/ts-docstr\" :fetcher github :files ( :defaults \"langs/*.el\" ))) \ud83d\udd0d Method 2. Manual # git clone https://github.com/emacs-vs/ts-docstr /path/to/lib then in Emacs: ( add-to-list 'load-path \"/path/to/lib\" ) ( require ts-docstr ) or ( use-package ts-fold :load-path \"/path/to/lib\" ) \ud83d\udcc7 Commands # Commands Description ts-docstr-at-point Add document string at current point. ts-docstr-mode Use nature key bindings. ts-docstr-ask Ask and update document string style (locally). \ud83d\udd27 Customization # \ud83c\udfa8 Styles # The style can be customized by setting the variable with this pattern ts-docstr-[lang]-style . Here is an example to set Java docstring style to Javadoc . ( setq ts-docstr-java-style 'javadoc ) \u2328\ufe0f Keys # Better editing experience, ( setq ts-docstr-key-support t ) Then do M-x ts-docstr-mode . \ud83d\udcac Ask to select the style # ( setq ts-docstr-ask-on-enable t ) \ud83c\udfa3 Hooks # Hook patterns are: ts-docstr-[module]-before-[activate/parse/insert]-hook ts-docstr-[module]-after-[activate/parse/insert]-hook For example, ts-docstr-c++-before-activate-hook or just a general one, (without the language name) ts-docstr-before-activate-hook \ud83d\udd28 Supported languages # \u26a0\ufe0f Please sort these two lists alphabetically! These languages are fairly complete: C / C++ / C# Go Java / JavaScript PHP / Python Ruby / Rust Scala Swift TypeScript These languages are in development: Elixir Haskell Shellscript Contribute # If you would like to contribute to this project, you may either clone and make pull requests to this repository. Or you can clone the project and establish your own branch of this tool. Any methods are welcome! \u2753 How to support my favorite language? # \u26a0 Before you start, make sure tree-sitter-langs supports the language you want to add! \u26a0 The best way to learn how the entire process works is to look into other files in the /langs folder from the project root. Find a similar language and see through code, all languages' implementation are very similar to one another. All parsers are defined in the /langs folder from the project root. The file is named with the prefix ts-docstr- followed by the language name . For example, if you want to create a parser for the C programming languge; the file should be named ts-docstr-c.el . The parser file is consist in three part: ts-docstr-[lang]-activate () ts-docstr-[lang]-parse (node) ts-docstr-[lang]-insert (node data) \ud83d\udd0d The activate function # The activate function is used to search for a node and confirm weather it should insert a document string. This function will eventually return a captured node, or return nil if we shouldn't insert a document string here. Here is the simplified version of Java activate function: ;;;###autoload ( defun ts-docstr-java-activate () \"...\" ;; Narrow region to next line, this defines the valid region to insert a ;; document string. ( ts-docstr-c-like-narrow-region ;; We grab a list of node from the narrowed region, here we try to capture ;; a `class' or `method' declaration. If this returns 2 or more nodes, ;; report an error since we don't expect these declarations happened on the ;; same line (region). ( nth 0 ( ts-docstr-grab-nodes-in-range ' ( class_declaration method_declaration ))))) Use ts-docstr-activatable-p function to check to see if you are able to insert a document string at point, this function returns a node. ( defun print-activate-node () ( interactive ) ; make interactive, so you could M-x ( message \"node: %s\" ( ts-docstr-activatable-p ))) Evaluate, then M-x print-activate-node to see if it return something or nil . \ud83d\udd0d The parse function # The parse function takes one argument node from the activate function. In this stage, we collect all necessary data ( paramters , class / enum name, etc) and put into a property list. Here is a simplest parse function for example: ;;;###autoload ( defun ts-docstr-java-parse ( node ) \"...\" ( if ( equal ( tsc-node-type node ) 'method_declaration ) ;; `types' and `variables' are lists. Each store typenames and variables ;; name. We simply parse the tree/node in this steps. ( list :type types :variable variables :return ( ts-docstr-java--parse-return params ) ; return `t' or `nil' :name ( ts-docstr-java--get-name node )) ; return `function' name ;; For `class', we don't need to parse parameters. ( list :name ( ts-docstr-java--get-name node )))) ; return `class' name \ud83d\udd0d The insert function # The insert function takes two arguments node and data from previous stages. We will need to define a config variable and function. The config variable: ( defcustom ts-docstr-java-style 'javadoc \"...\" :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"Javadoc Style\" javadoc ))) The config function: ;; This is later called and exposed in the insertion function. ( defun ts-docstr-java-config () \"...\" ( cl-case ts-docstr-java-style ; define the style by each style guide ( javadoc ( list :start \"/**\" ; this plist is later used in insertion function :prefix \"* \" :end \"*/\" :summary \"{d}\" :param \"@param {v} {d}\" :return \"@return {d}\" )) ( t ... ))) Lastly, you can create the insert function. In this stage you will write data to the current file. ( defun ts-docstr-java-insert ( node data ) \"Insert document string upon NODE and DATA.\" ( ts-docstr-inserting ( ts-docstr-insert c-start \"\\n\" ) ; /** ( ts-docstr-insert c-prefix \" \" ( plist-get data :name ) \"\\n\" ) ; * NAME ( ts-docstr-insert c-end ))) ; */ /** * Example */ class Example {} \u2753 How to add a document string style? # Find the language file in the /langs folder from the project root, if you couldn't find it, see \u2753 How to support my favorite language? . First look into the variable with the name similar to ts-docstr-[lang]-style . See the following example, ;; langs/ts-docstr-java.el ( defcustom ts-docstr-java-style 'javadoc \"...\" :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"Javadoc Style\" javadoc ))) See if the style is already supported. Continue reading if it does NOT , there are two parts you need to change in order to support your favorite style! First, you need to add an option to the style variable so other people would notice the changes. ... :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"New Doc Style\" new-doc-style ) ... Then next (last) step is to do the implementation in the insertion function. The implementation is isolated and complex depends on the style you targeted. Here we show the core logic of the implementation, but we prefer to look right into the code: ... ( ts-docstr-with-style-case ( new-doc-style ; listen to new-doc-style ( insert \"My new docstring style! :)\" )) ... \u2753 How to trigger by a key? # To insert document string with key is to use ts-docstr-mode . The entire key related logic is placed in ts-docstr-key.el file from the project root. To implement one, you first need to design the method to insert the entire document string (I called it triggeration function, or trigger). For example, in C# , you can trigger the document string insertion function by hittting the third slash in a line.","title":"Home"},{"location":"#ts-docstr","text":"A document string minor mode using tree-sitter Table of Contents ts-docstr \ud83d\udcbe Installation \ud83d\udd0d Method 1. with straight.el and use-package : \ud83d\udd0d Method 2. Manual \ud83d\udcc7 Commands \ud83d\udd27 Customization \ud83c\udfa8 Styles \u2328\ufe0f Keys \ud83d\udcac Ask to select the style \ud83c\udfa3 Hooks \ud83d\udd28 Supported languages Contribute \u2753 How to support my favorite language? \ud83d\udd0d The activate function \ud83d\udd0d The parse function \ud83d\udd0d The insert function \u2753 How to add a document string style? \u2753 How to trigger by a key?","title":"ts-docstr"},{"location":"#installation","text":"","title":"\ud83d\udcbe Installation"},{"location":"#method-1-with-straightel-and-use-package","text":"( use-package ts-docstr :straight ( ts-docstr :repo \"emacs-vs/ts-docstr\" :fetcher github :files ( :defaults \"langs/*.el\" )))","title":"\ud83d\udd0d Method 1. with straight.el and use-package:"},{"location":"#method-2-manual","text":"git clone https://github.com/emacs-vs/ts-docstr /path/to/lib then in Emacs: ( add-to-list 'load-path \"/path/to/lib\" ) ( require ts-docstr ) or ( use-package ts-fold :load-path \"/path/to/lib\" )","title":"\ud83d\udd0d Method 2. Manual"},{"location":"#commands","text":"Commands Description ts-docstr-at-point Add document string at current point. ts-docstr-mode Use nature key bindings. ts-docstr-ask Ask and update document string style (locally).","title":"\ud83d\udcc7 Commands"},{"location":"#customization","text":"","title":"\ud83d\udd27 Customization"},{"location":"#styles","text":"The style can be customized by setting the variable with this pattern ts-docstr-[lang]-style . Here is an example to set Java docstring style to Javadoc . ( setq ts-docstr-java-style 'javadoc )","title":"\ud83c\udfa8 Styles"},{"location":"#keys","text":"Better editing experience, ( setq ts-docstr-key-support t ) Then do M-x ts-docstr-mode .","title":"\u2328\ufe0f Keys"},{"location":"#ask-to-select-the-style","text":"( setq ts-docstr-ask-on-enable t )","title":"\ud83d\udcac Ask to select the style"},{"location":"#hooks","text":"Hook patterns are: ts-docstr-[module]-before-[activate/parse/insert]-hook ts-docstr-[module]-after-[activate/parse/insert]-hook For example, ts-docstr-c++-before-activate-hook or just a general one, (without the language name) ts-docstr-before-activate-hook","title":"\ud83c\udfa3 Hooks"},{"location":"#supported-languages","text":"\u26a0\ufe0f Please sort these two lists alphabetically! These languages are fairly complete: C / C++ / C# Go Java / JavaScript PHP / Python Ruby / Rust Scala Swift TypeScript These languages are in development: Elixir Haskell Shellscript","title":"\ud83d\udd28 Supported languages"},{"location":"#contribute","text":"If you would like to contribute to this project, you may either clone and make pull requests to this repository. Or you can clone the project and establish your own branch of this tool. Any methods are welcome!","title":"Contribute"},{"location":"#how-to-support-my-favorite-language","text":"\u26a0 Before you start, make sure tree-sitter-langs supports the language you want to add! \u26a0 The best way to learn how the entire process works is to look into other files in the /langs folder from the project root. Find a similar language and see through code, all languages' implementation are very similar to one another. All parsers are defined in the /langs folder from the project root. The file is named with the prefix ts-docstr- followed by the language name . For example, if you want to create a parser for the C programming languge; the file should be named ts-docstr-c.el . The parser file is consist in three part: ts-docstr-[lang]-activate () ts-docstr-[lang]-parse (node) ts-docstr-[lang]-insert (node data)","title":"\u2753 How to support my favorite language?"},{"location":"#the-activate-function","text":"The activate function is used to search for a node and confirm weather it should insert a document string. This function will eventually return a captured node, or return nil if we shouldn't insert a document string here. Here is the simplified version of Java activate function: ;;;###autoload ( defun ts-docstr-java-activate () \"...\" ;; Narrow region to next line, this defines the valid region to insert a ;; document string. ( ts-docstr-c-like-narrow-region ;; We grab a list of node from the narrowed region, here we try to capture ;; a `class' or `method' declaration. If this returns 2 or more nodes, ;; report an error since we don't expect these declarations happened on the ;; same line (region). ( nth 0 ( ts-docstr-grab-nodes-in-range ' ( class_declaration method_declaration ))))) Use ts-docstr-activatable-p function to check to see if you are able to insert a document string at point, this function returns a node. ( defun print-activate-node () ( interactive ) ; make interactive, so you could M-x ( message \"node: %s\" ( ts-docstr-activatable-p ))) Evaluate, then M-x print-activate-node to see if it return something or nil .","title":"\ud83d\udd0d The activate function"},{"location":"#the-parse-function","text":"The parse function takes one argument node from the activate function. In this stage, we collect all necessary data ( paramters , class / enum name, etc) and put into a property list. Here is a simplest parse function for example: ;;;###autoload ( defun ts-docstr-java-parse ( node ) \"...\" ( if ( equal ( tsc-node-type node ) 'method_declaration ) ;; `types' and `variables' are lists. Each store typenames and variables ;; name. We simply parse the tree/node in this steps. ( list :type types :variable variables :return ( ts-docstr-java--parse-return params ) ; return `t' or `nil' :name ( ts-docstr-java--get-name node )) ; return `function' name ;; For `class', we don't need to parse parameters. ( list :name ( ts-docstr-java--get-name node )))) ; return `class' name","title":"\ud83d\udd0d The parse function"},{"location":"#the-insert-function","text":"The insert function takes two arguments node and data from previous stages. We will need to define a config variable and function. The config variable: ( defcustom ts-docstr-java-style 'javadoc \"...\" :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"Javadoc Style\" javadoc ))) The config function: ;; This is later called and exposed in the insertion function. ( defun ts-docstr-java-config () \"...\" ( cl-case ts-docstr-java-style ; define the style by each style guide ( javadoc ( list :start \"/**\" ; this plist is later used in insertion function :prefix \"* \" :end \"*/\" :summary \"{d}\" :param \"@param {v} {d}\" :return \"@return {d}\" )) ( t ... ))) Lastly, you can create the insert function. In this stage you will write data to the current file. ( defun ts-docstr-java-insert ( node data ) \"Insert document string upon NODE and DATA.\" ( ts-docstr-inserting ( ts-docstr-insert c-start \"\\n\" ) ; /** ( ts-docstr-insert c-prefix \" \" ( plist-get data :name ) \"\\n\" ) ; * NAME ( ts-docstr-insert c-end ))) ; */ /** * Example */ class Example {}","title":"\ud83d\udd0d The insert function"},{"location":"#how-to-add-a-document-string-style","text":"Find the language file in the /langs folder from the project root, if you couldn't find it, see \u2753 How to support my favorite language? . First look into the variable with the name similar to ts-docstr-[lang]-style . See the following example, ;; langs/ts-docstr-java.el ( defcustom ts-docstr-java-style 'javadoc \"...\" :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"Javadoc Style\" javadoc ))) See if the style is already supported. Continue reading if it does NOT , there are two parts you need to change in order to support your favorite style! First, you need to add an option to the style variable so other people would notice the changes. ... :type ' ( choice ( const :tag \"No specify\" nil ) ( const :tag \"New Doc Style\" new-doc-style ) ... Then next (last) step is to do the implementation in the insertion function. The implementation is isolated and complex depends on the style you targeted. Here we show the core logic of the implementation, but we prefer to look right into the code: ... ( ts-docstr-with-style-case ( new-doc-style ; listen to new-doc-style ( insert \"My new docstring style! :)\" )) ...","title":"\u2753 How to add a document string style?"},{"location":"#how-to-trigger-by-a-key","text":"To insert document string with key is to use ts-docstr-mode . The entire key related logic is placed in ts-docstr-key.el file from the project root. To implement one, you first need to design the method to insert the entire document string (I called it triggeration function, or trigger). For example, in C# , you can trigger the document string insertion function by hittting the third slash in a line.","title":"\u2753 How to trigger by a key?"},{"location":"CHANGELOG/","text":"Change Log # All notable changes to this project will be documented in this file. Check Keep a Changelog for recommendations on how to structure this file. 0.1.1 (Unreleased) # Released N/A N/A 0.1.0 # Released Sep 25, 2022 Initial release","title":"Change Log"},{"location":"CHANGELOG/#change-log","text":"All notable changes to this project will be documented in this file. Check Keep a Changelog for recommendations on how to structure this file.","title":"Change Log"},{"location":"CHANGELOG/#011-unreleased","text":"Released N/A N/A","title":"0.1.1 (Unreleased)"},{"location":"CHANGELOG/#010","text":"Released Sep 25, 2022 Initial release","title":"0.1.0"},{"location":"page/langs/actionscript/","text":"ActionScript # You can customize variable ts-docstr-actionscript-style for the following value. asdoc - ASDoc Style (default) nil - Respect to user's customization References # Creating ASDoc comments in ActionScript","title":"ActionScript"},{"location":"page/langs/actionscript/#actionscript","text":"You can customize variable ts-docstr-actionscript-style for the following value. asdoc - ASDoc Style (default) nil - Respect to user's customization","title":"ActionScript"},{"location":"page/langs/actionscript/#references","text":"Creating ASDoc comments in ActionScript","title":"References"},{"location":"page/langs/c%2B%2B/","text":"C++ # You can customize variable ts-docstr-c++-style for the following value. doxygen - Doxygen Style (default) qt - Qt Style nil - Respect to user's customization References # Doxygen C++ Documentation Style","title":"C++"},{"location":"page/langs/c%2B%2B/#c","text":"You can customize variable ts-docstr-c++-style for the following value. doxygen - Doxygen Style (default) qt - Qt Style nil - Respect to user's customization","title":"C++"},{"location":"page/langs/c%2B%2B/#references","text":"Doxygen C++ Documentation Style","title":"References"},{"location":"page/langs/c/","text":"C # You can customize variable ts-docstr-c-style for the following value. nil - Respect to user's customization Notice C is for down compatible, I would recommend you use c++mode instead of c-mode . References # N/A","title":"C"},{"location":"page/langs/c/#c","text":"You can customize variable ts-docstr-c-style for the following value. nil - Respect to user's customization Notice C is for down compatible, I would recommend you use c++mode instead of c-mode .","title":"C"},{"location":"page/langs/c/#references","text":"N/A","title":"References"},{"location":"page/langs/csharp/","text":"C# # You can customize variable ts-docstr-csharp-style for the following value. microsoft - Microsoft standard nil - Respect to user's customization C# currently uses mix of Javadoc and XML documentation . The style and prefix will be auto-detect inside the code. Triggerations # Generally, you will need something around to parse to make document string work correctly. /*[*]*/ - hit return between /* and */ (Javadoc) /// - the third slashes (XML documentation) References # Documentation comments - C# langauge specification","title":"C#"},{"location":"page/langs/csharp/#c","text":"You can customize variable ts-docstr-csharp-style for the following value. microsoft - Microsoft standard nil - Respect to user's customization C# currently uses mix of Javadoc and XML documentation . The style and prefix will be auto-detect inside the code.","title":"C#"},{"location":"page/langs/csharp/#triggerations","text":"Generally, you will need something around to parse to make document string work correctly. /*[*]*/ - hit return between /* and */ (Javadoc) /// - the third slashes (XML documentation)","title":"Triggerations"},{"location":"page/langs/csharp/#references","text":"Documentation comments - C# langauge specification","title":"References"},{"location":"page/langs/go/","text":"Golang # You can customize variable ts-docstr-go-style for the following value. godoc - Document String in Golang (default) nil - Respect to user's customization References # GoDoc","title":"Go"},{"location":"page/langs/go/#golang","text":"You can customize variable ts-docstr-go-style for the following value. godoc - Document String in Golang (default) nil - Respect to user's customization","title":"Golang"},{"location":"page/langs/go/#references","text":"GoDoc","title":"References"},{"location":"page/langs/groovy/","text":"Groovy # You can customize variable ts-docstr-groovy-style for the following value. groovydoc - Document String in Groovy (default) nil - Respect to user's customization References # Groovy Lang","title":"Groovy"},{"location":"page/langs/groovy/#groovy","text":"You can customize variable ts-docstr-groovy-style for the following value. groovydoc - Document String in Groovy (default) nil - Respect to user's customization","title":"Groovy"},{"location":"page/langs/groovy/#references","text":"Groovy Lang","title":"References"},{"location":"page/langs/java/","text":"Java # You can customize variable ts-docstr-java-style for the following value. javadoc - Javadoc Style (default) nil - Respect to user's customization References # Javadoc","title":"Java"},{"location":"page/langs/java/#java","text":"You can customize variable ts-docstr-java-style for the following value. javadoc - Javadoc Style (default) nil - Respect to user's customization","title":"Java"},{"location":"page/langs/java/#references","text":"Javadoc","title":"References"},{"location":"page/langs/javascript/","text":"JavaScript # You can customize variable ts-docstr-js-style for the following value. jsdoc - JSdoc Style (default) google - Google Style nil - Respect to user's customization References # JSDoc Google : JavaScript","title":"JavaScript"},{"location":"page/langs/javascript/#javascript","text":"You can customize variable ts-docstr-js-style for the following value. jsdoc - JSdoc Style (default) google - Google Style nil - Respect to user's customization","title":"JavaScript"},{"location":"page/langs/javascript/#references","text":"JSDoc Google : JavaScript","title":"References"},{"location":"page/langs/lua/","text":"Lua # You can customize variable ts-docstr-lua-style for the following value. luadoc - Kepler's specification (default) doxygen - doxygen/Javadoc-like style scriptum - Lua based document generator to Markdown nil - Respect to user's customization Spliter # If you are using style that requres spliiter; you can change the splitter by customize the variable docstr-lua-splitter . The doxygen style look like this, -- taken from cgilua/src/cgilua/session.lua ------------------------------------- -- Deletes a session. -- @param id Session identification. ------------------------------------- function delete ( id ) assert ( check_id ( id )) remove ( filename ( id )) end References # Lua Wiki LuaDoc lua-scriptum","title":"Lua"},{"location":"page/langs/lua/#lua","text":"You can customize variable ts-docstr-lua-style for the following value. luadoc - Kepler's specification (default) doxygen - doxygen/Javadoc-like style scriptum - Lua based document generator to Markdown nil - Respect to user's customization","title":"Lua"},{"location":"page/langs/lua/#spliter","text":"If you are using style that requres spliiter; you can change the splitter by customize the variable docstr-lua-splitter . The doxygen style look like this, -- taken from cgilua/src/cgilua/session.lua ------------------------------------- -- Deletes a session. -- @param id Session identification. ------------------------------------- function delete ( id ) assert ( check_id ( id )) remove ( filename ( id )) end","title":"Spliter"},{"location":"page/langs/lua/#references","text":"Lua Wiki LuaDoc lua-scriptum","title":"References"},{"location":"page/langs/objc/","text":"Objective-C # You can customize variable ts-docstr-objc-style for the following value. header-doc HeaderDoc documentation generator developed by Apple Inc (default) nil - Respect to user's customization References # HeaderDoc","title":"Objective-C"},{"location":"page/langs/objc/#objective-c","text":"You can customize variable ts-docstr-objc-style for the following value. header-doc HeaderDoc documentation generator developed by Apple Inc (default) nil - Respect to user's customization","title":"Objective-C"},{"location":"page/langs/objc/#references","text":"HeaderDoc","title":"References"},{"location":"page/langs/php/","text":"PHP # You can customize variable ts-docstr-php-style for the following value. phpdoc - PHPDoc Style (default) nil - Respect to user's customization References # PHPDoc Wikipedia","title":"PHP"},{"location":"page/langs/php/#php","text":"You can customize variable ts-docstr-php-style for the following value. phpdoc - PHPDoc Style (default) nil - Respect to user's customization","title":"PHP"},{"location":"page/langs/php/#references","text":"PHPDoc Wikipedia","title":"References"},{"location":"page/langs/python/","text":"Python # You can customize variable ts-docstr-python-style for the following value. pep-257 - PEP 257 convention (default) google - Google Style numpy - NumPy Style nil - Respect to user's customization References # PEP 257 Google Numpy","title":"Python"},{"location":"page/langs/python/#python","text":"You can customize variable ts-docstr-python-style for the following value. pep-257 - PEP 257 convention (default) google - Google Style numpy - NumPy Style nil - Respect to user's customization","title":"Python"},{"location":"page/langs/python/#references","text":"PEP 257 Google Numpy","title":"References"},{"location":"page/langs/ruby/","text":"Ruby # You can customize variable ts-docstr-ruby-style for the following value. rdoc - Ruby Documentation System (default) nil - Respect to user's customization References # GitHub: rdoc","title":"Ruby"},{"location":"page/langs/ruby/#ruby","text":"You can customize variable ts-docstr-ruby-style for the following value. rdoc - Ruby Documentation System (default) nil - Respect to user's customization","title":"Ruby"},{"location":"page/langs/ruby/#references","text":"GitHub: rdoc","title":"References"},{"location":"page/langs/rust/","text":"Rust # You can customize variable ts-docstr-rust-style for the following value. rfc-430 - RFC 430 documentation conventions (default) nil - Respect to user's customization References # Rust Lang","title":"Rust"},{"location":"page/langs/rust/#rust","text":"You can customize variable ts-docstr-rust-style for the following value. rfc-430 - RFC 430 documentation conventions (default) nil - Respect to user's customization","title":"Rust"},{"location":"page/langs/rust/#references","text":"Rust Lang","title":"References"},{"location":"page/langs/scala/","text":"Scala # You can customize variable ts-docstr-scala-style for the following value. scaladoc - Scaladoc (default) nil - Respect to user's customization References # Scaladoc","title":"Scala"},{"location":"page/langs/scala/#scala","text":"You can customize variable ts-docstr-scala-style for the following value. scaladoc - Scaladoc (default) nil - Respect to user's customization","title":"Scala"},{"location":"page/langs/scala/#references","text":"Scaladoc","title":"References"},{"location":"page/langs/swift/","text":"Swift # You can customize variable ts-docstr-swift-style for the following value. header-doc - HeaderDoc (default) swift-doc - SwiftDoc nil - Respect to user's customization References # SwiftDoc (archived) HeaderDoc","title":"Swift"},{"location":"page/langs/swift/#swift","text":"You can customize variable ts-docstr-swift-style for the following value. header-doc - HeaderDoc (default) swift-doc - SwiftDoc nil - Respect to user's customization","title":"Swift"},{"location":"page/langs/swift/#references","text":"SwiftDoc (archived) HeaderDoc","title":"References"},{"location":"page/langs/typescript/","text":"TypeScript # You can customize variable ts-docstr-typescript-style for the following value. typedoc - Documentation generator for TypeScript projects. (default) tsdoc - A doc comment standard for TypeScript nil - Respect to user's customization References # TypeDoc TSDoc","title":"TypeScript"},{"location":"page/langs/typescript/#typescript","text":"You can customize variable ts-docstr-typescript-style for the following value. typedoc - Documentation generator for TypeScript projects. (default) tsdoc - A doc comment standard for TypeScript nil - Respect to user's customization","title":"TypeScript"},{"location":"page/langs/typescript/#references","text":"TypeDoc TSDoc","title":"References"}]}